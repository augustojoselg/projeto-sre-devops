steps:
  # Etapa 1: Validar e formatar o código Terraform
  - name: 'hashicorp/terraform:1.5.7'
    id: 'Format'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'terraform fmt -check'
    dir: 'infra'

  - name: 'hashicorp/terraform:1.5.7'
    id: 'Validate'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'terraform init && terraform validate'
    dir: 'infra'

  # Etapa 2: Escanear manifestos Kubernetes com Trivy
  - name: 'aquasec/trivy:latest'
    id: 'Scan-Helm-Templates'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        helm template devops-release ./charts/app-chart --values ./charts/devops-values.yaml > devops.yaml
        helm template sre-release ./charts/app-chart --values ./charts/sre-values.yaml > sre.yaml
        trivy config --exit-code 1 --severity CRITICAL devops.yaml
        trivy config --exit-code 1 --severity CRITICAL sre.yaml

  # Etapa 3: Aplicar a infraestrutura com Terraform
  - name: 'hashicorp/terraform:1.5.7'
    id: 'Plan'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'terraform init && terraform plan -out=tfplan'
    dir: 'infra'

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Apply'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'terraform init && terraform apply -auto-approve tfplan'
    dir: 'infra'

  # Etapa 4: Configurar kubectl para o cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Get-Credentials'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'gcloud container clusters get-credentials ${_CLUSTER_NAME} --region ${_REGION}'

  # Etapa 5: Deploy das aplicações com Helm
  - name: 'gcr.io/cloud-builders/helm'
    id: 'Deploy-SRE-App'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        helm upgrade --install sre-whoami ./charts/app-chart \
          --values ./charts/sre-values.yaml \
          --namespace sre --create-namespace \
          --wait
  
  - name: 'gcr.io/cloud-builders/helm'
    id: 'Deploy-DevOps-App'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        helm upgrade --install devops-whoami ./charts/app-chart \
          --values ./charts/devops-values.yaml \
          --namespace devops --create-namespace \
          --wait

  # Etapa 6: Health check das aplicações (opcional, mas recomendado)
  - name: 'curlimages/curl'
    id: 'Health-Check-SRE'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'curl --fail --retry 5 --retry-delay 10 https://${_SRE_DOMAIN}/'

  - name: 'curlimages/curl'
    id: 'Health-Check-DevOps'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'curl --fail --retry 5 --retry-delay 10 https://${_DEVOPS_DOMAIN}/'

timeout: '1800s'
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
